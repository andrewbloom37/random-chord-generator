{"version":3,"sources":["components/ChordInfo.tsx","components/Input.tsx","components/ValueControls.tsx","lib/chord-calculator.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ChordInfo","_ref","rootNote","readableChord","react_default","a","createElement","Fragment","className","third","fifth","seventh","ninth","eleventh","thirteenth","Input","props","disabled","min","max","onChange","e","update","Number","target","value","step","type","initialChance","ValueControls","state","completelyRandom","chance","hash","Math","random","handleCheckboxChange","event","checked","_this","setState","Object","objectSpread","_","prevState","this","updateChance","_this2","name","id","components_Input","v","React","Component","generateRandomNumber","n","floor","generateNinth","randomOneOfFour","chordCalculator","chord","arguments","length","undefined","includes","minorThirdNoSharpedNinth","calculatedChord","keys","forEach","key","err","console","log","calculateNotesToPlay","fourthNoEleventh","flatFifthNoSharpedEleventh","augmentedFifthNoFlatThirteenth","sixthNoThirteenth","note","translateFifth","translateSeventh","translateNinth","translateEleventh","translateThirteenth","getReadableChord","initialChord","randomize","root","App","output","onClick","components_ChordInfo","ValueControls_ValueControls","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd3757a3.chunk.js","sourcesContent":["import React from 'react';\nimport { ReadableChord } from '../lib/chord-calculator';\n\ninterface Props {\n  rootNote: string,\n  readableChord: ReadableChord,\n};\n\nconst ChordInfo = ({ rootNote, readableChord }: Props) => (\n  <React.Fragment>\n    <tr className='chance-row'>\n      <td>root</td>\n      <td>third</td>\n      <td>fifth</td>\n      <td>seventh</td>\n      <td>ninth</td>\n      <td>eleventh</td>\n      <td>thirteenth</td>\n    </tr>\n    <tr className='chance-row'>\n      <td>{rootNote}</td>\n      <td>{readableChord.third}</td>\n      <td>{readableChord.fifth}</td>\n      <td>{readableChord.seventh}</td>\n      <td>{readableChord.ninth}</td>\n      <td>{readableChord.eleventh}</td>\n      <td>{readableChord.thirteenth}</td>\n    </tr>\n  </React.Fragment>\n);\n\nexport default ChordInfo;\n\n","import React from 'react';\n\ninterface Props {\n  disabled: boolean,\n  update(v: number): void,\n  value: number,\n};\n\nconst Input = (props: Props) => (\n  <input\n    disabled={props.disabled}\n    min='0'\n    max='100'\n    onChange={(e: React.ChangeEvent<HTMLInputElement>) => props.update(Number(e.target.value))}\n    step='1'\n    type='number'\n    value={props.value}\n  />\n);\nexport default Input;","import React from 'react';\nimport Input from './Input';\nimport { ChanceOfPlaying } from '../lib/chord-calculator';\n\ninterface Props {\n  updateChance(chance: ChanceOfPlaying | null): void,\n};\n\ninterface State {\n  completelyRandom: boolean,\n  chance: ChanceOfPlaying,\n  hash: number,\n};\n\nconst initialChance = {\n  fifth: 50,\n  seventh: 50,\n  ninth: 50,\n  eleventh: 50,\n  thirteenth: 50,\n};\n\nexport default class ValueControls extends React.Component<Props, State> {\n  state = {\n    completelyRandom: true,\n    chance: initialChance,\n    hash: Math.random(),\n  };\n\n  componentDidUpdate(_: Props, prevState: State) {\n    if (prevState.hash !== this.state.hash) {\n      if (this.state.completelyRandom) {\n        this.props.updateChance(null);\n      } else {\n        this.props.updateChance(this.state.chance);\n      }\n    }\n  }\n\n  handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n    const { checked } = target;\n    this.setState({\n      ...this.state,\n      completelyRandom: checked,\n      hash: Math.random(),\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <tr className='chance-row'>\n          <td>\n            <label>\n              all random\n            <input\n                name='random'\n                id='random_id'\n                type='checkbox'\n                checked={this.state.completelyRandom}\n                onChange={(e) => this.handleCheckboxChange(e)}\n              />\n            </label>\n          </td>\n          <td></td>\n          <td>\n            <Input\n              disabled={this.state.completelyRandom}\n              value={this.state.chance.fifth}\n              update={(v: number) => this.setState({\n                ...this.state,\n                hash: Math.random(),\n                chance: {\n                  ...this.state.chance,\n                  fifth: v,\n                },\n              })}\n              />\n          </td>\n          <td>\n            <Input\n              disabled={this.state.completelyRandom}\n              value={this.state.chance.seventh}\n              update={(v: number) => this.setState({\n                ...this.state,\n                hash: Math.random(),\n                chance: {\n                  ...this.state.chance,\n                  seventh: v,\n                },\n              })}\n              />\n          </td>\n          <td>\n            <Input\n              disabled={this.state.completelyRandom}\n              value={this.state.chance.ninth}\n              update={(v: number) => this.setState({\n                ...this.state,\n                hash: Math.random(),\n                chance: {\n                  ...this.state.chance,\n                  ninth: v,\n                },\n              })}\n            /> \n          </td>\n          <td>\n            <Input\n              disabled={this.state.completelyRandom}\n              value={this.state.chance.eleventh}\n              update={(v: number) => this.setState({\n                ...this.state,\n                hash: Math.random(),\n                chance: {\n                  ...this.state.chance,\n                  eleventh: v,\n                },\n              })}\n              /> \n          </td>\n          <td>\n            <Input\n              disabled={this.state.completelyRandom}\n              value={this.state.chance.thirteenth}\n              update={(v: number) => this.setState({\n                ...this.state,\n                hash: Math.random(),\n                chance: {\n                  ...this.state.chance,\n                  thirteenth: v,\n                },\n              })}\n              /> \n          </td>\n        </tr>\n      </React.Fragment>\n    );\n  }\n}\n","const percentToDecimal = (input: number) => input / 100;\n\nconst generateRandomNumber = (n: number) => Math.floor(Math.random() * n);\n\nconst generateThird = () =>\n  3 + generateRandomNumber(3);\n\nconst generateFifth = () =>\n  6 + generateRandomNumber(3);\n\nconst generateSeventh = () =>\n  9 + generateRandomNumber(3);\n\nconst generateNinth = () => {\n  const randomOneOfFour = generateRandomNumber(4);\n  if (randomOneOfFour === 3) return [13, 15];\n  return [13 + randomOneOfFour];\n};\n\nconst generateEleventh = () =>\n  17 + generateRandomNumber(2);\n\nconst generateThirteenth = () =>\n  20 + generateRandomNumber(2);\n\ninterface Chord {\n  third: number,\n  fifth: number | null,\n  seventh: number | null,\n  ninth: Array<number> | null,\n  eleventh: number | null,\n  thirteenth: number | null,\n};\n\nconst generateRandomChord = () => {\n  const chord: Chord = {\n    third: generateThird(),\n    fifth: generateFifth(),\n    seventh: generateSeventh(),\n    ninth: generateNinth(),\n    eleventh: generateEleventh(),\n    thirteenth: generateThirteenth(),\n  };\n  return chord;\n};\n\nconst minorThirdNoSharpedNinth = (chord: Chord): boolean =>\n  chord.third === 3 && !!chord.ninth && chord.ninth.includes(15);\n\nconst fourthNoEleventh = (chord: Chord): boolean =>\n  chord.third === 5 && chord.eleventh === 17;\n\nconst flatFifthNoSharpedEleventh = (chord: Chord): boolean =>\n  chord.fifth === 6 && chord.eleventh === 18;\n\nconst augmentedFifthNoFlatThirteenth = (chord: Chord): boolean =>\n  chord.fifth === 8 && chord.thirteenth === 20;\n\nconst sixthNoThirteenth = (chord: Chord): boolean =>\n  chord.seventh === 9 && chord.thirteenth === 21;\n\nconst doLogic = (chord: Chord): Chord => {\n  if (minorThirdNoSharpedNinth(chord)) chord.ninth = null;\n  if (fourthNoEleventh(chord)) chord.eleventh = null;\n  if (flatFifthNoSharpedEleventh(chord)) chord.eleventh = null;\n  if (augmentedFifthNoFlatThirteenth(chord)) chord.thirteenth = null;\n  if (sixthNoThirteenth(chord)) chord.thirteenth = null;\n  return chord;\n}\n\nexport interface ChanceOfPlaying {\n  fifth: number,\n  seventh: number,\n  ninth: number,\n  eleventh: number,\n  thirteenth: number,\n};\n\ntype ChanceKeys = 'third' | 'fifth' | 'seventh' | 'ninth' | 'eleventh' | 'thirteenth';\n\nconst calculateNotesToPlay = (chord: Chord, chance: ChanceOfPlaying): Chord => {\n  try {\n    const calculatedChord = {};\n    // @ts-ignore\n    calculatedChord.third = chord.third;\n    // @ts-ignore: ChanceKeys is not a 'string' (but it is a string enum, so this works)\n    Object.keys(chord).forEach((key: ChanceKeys) => {\n      if (key === 'third') return;\n      if (Math.random() > percentToDecimal(chance[key])) {\n        // @ts-ignore\n        calculatedChord[key] = null;\n      } else {\n        // @ts-ignore\n        calculatedChord[key] = chord[key];\n      }\n    })\n    // @ts-ignore: this is a runtime created object\n    return calculatedChord;\n  } catch (err) {\n    console.log(err);\n    return chord;\n  }\n};\n\nconst completelyRandom: ChanceOfPlaying  = {\n  fifth: generateRandomNumber(100),\n  seventh: generateRandomNumber(100),\n  ninth: generateRandomNumber(100),\n  eleventh: generateRandomNumber(100),\n  thirteenth: generateRandomNumber(100),\n};\n\nexport const generateRoot = () => generateRandomNumber(12);\nexport const chordCalculator = (chance = completelyRandom): Chord =>\n  doLogic(calculateNotesToPlay(generateRandomChord(), chance));\n\ninterface JustRoot {\n  root: number,\n};\n\nexport type FullChord = JustRoot & Chord;\n\nexport const calculateChordRelativeToRoot = (root: number, chord: Chord): FullChord => ({\n  root,\n  third: chord.third + root,\n  fifth: chord.fifth ? chord.fifth + root : null,\n  seventh: chord.seventh ? chord.seventh + root : null,\n  ninth: chord.ninth ? chord.ninth.map(v => v + root) : null,\n  eleventh: chord.eleventh ? chord.eleventh + root : null,\n  thirteenth: chord.thirteenth ? chord.thirteenth + root : null,\n});\n\nconst note = ['A', 'Bb', 'B', 'C', 'Db', 'D', 'Eb', 'E', 'F', 'F#', 'G', 'Ab'];\nexport const getNote = (root: number) => note[root]; \n\nconst translateThird = (note: number) => {\n  if (note === 3) return '-';\n  if (note === 4) return 'M';\n  return '4';\n};\n\nconst translateFifth = (note: number | null) => {\n  if (!note) return null;\n  if (note === 6) return 'b5';\n  if (note === 7) return '5';\n  return '+5';\n};\n\nconst translateSeventh = (note: number | null) => {\n  if (!note) return null;\n  if (note === 9) return '6';\n  if (note === 10) return '-7';\n  return 'Maj7';\n};\n\nconst translateNinth = (note: Array<number> | null) => {\n  if (!note) return null;\n  if (note.length === 2) return 'b9 & #9';\n  const ninth = note[0];\n  if (ninth === 13) return 'b9';\n  if (ninth === 14) return '9';\n  return '#9'\n};\n\nconst translateEleventh = (note: number | null) => {\n  if (!note) return null;\n  if (note === 17) return '11';\n  return '#11';\n};\n\nconst translateThirteenth = (note: number | null) => {\n  if (!note) return null;\n  if (note === 20) return 'b13';\n  return '13';\n};\n\nexport interface ReadableChord {\n  third: string,\n  fifth: string | null,\n  seventh: string | null,\n  ninth: string | null,\n  eleventh: string | null,\n  thirteenth: string | null,\n};\n\nexport const getReadableChord = (chord: Chord): ReadableChord => ({\n  third: translateThird(chord.third),\n  fifth: translateFifth(chord.fifth),\n  seventh: translateSeventh(chord.seventh),\n  ninth: translateNinth(chord.ninth),\n  eleventh: translateEleventh(chord.eleventh),\n  thirteenth: translateThirteenth(chord.thirteenth),\n});","import React from 'react';\nimport './App.css';\nimport ChordInfo from './components/ChordInfo';\nimport ValueControls from './components/ValueControls';\nimport {\n  ChanceOfPlaying,\n  chordCalculator,\n  generateRoot,\n  getNote,\n  getReadableChord,\n  ReadableChord\n} from './lib/chord-calculator';\n\ninterface State {\n  chance: ChanceOfPlaying | null,\n  output: {\n    root: string,\n    chord: ReadableChord,\n  },\n};\n\nconst initialChord = {\n  third: '',\n  fifth: null,\n  seventh: null,\n  ninth: null,\n  eleventh: null,\n  thirteenth: null,\n};\n\nconst randomize = (chance: ChanceOfPlaying | null) => ({\n  root: getNote(generateRoot()),\n  chord: getReadableChord(chordCalculator(chance || undefined)),\n});\n\nexport default class App extends React.Component<{}, State> {\n  state = {\n    chance: null,\n    output: {\n      root: '',\n      chord: initialChord,\n    },\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>random chord generator</h1>\n        </header>\n        <main>\n          <button\n            onClick={() => this.setState({\n              ...this.state,\n              output: randomize(this.state.chance),\n            })}\n          >\n            generate a random chord\n          </button>\n          <table className='chance-table'>\n            <tbody>\n              <ChordInfo\n                readableChord={this.state.output.chord}\n                rootNote={this.state.output.root}\n              />\n              <ValueControls\n                updateChance={(chance: ChanceOfPlaying) => this.setState({\n                  ...this.state,\n                  chance,\n                })}\n              />\n            </tbody>\n          </table>\n        </main>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}